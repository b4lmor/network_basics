// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/internal_api.proto

package internal_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerToClient_FillSquares_FullMethodName      = "/game.ServerToClient/FillSquares"
	ServerToClient_EndGame_FullMethodName          = "/game.ServerToClient/EndGame"
	ServerToClient_SendGamesInfo_FullMethodName    = "/game.ServerToClient/SendGamesInfo"
	ServerToClient_SendGameInfoFull_FullMethodName = "/game.ServerToClient/SendGameInfoFull"
)

// ServerToClientClient is the client API for ServerToClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerToClientClient interface {
	FillSquares(ctx context.Context, in *FillSquaresRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendGamesInfo(ctx context.Context, in *SendGamesInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendGameInfoFull(ctx context.Context, in *SendGameInfoFullRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serverToClientClient struct {
	cc grpc.ClientConnInterface
}

func NewServerToClientClient(cc grpc.ClientConnInterface) ServerToClientClient {
	return &serverToClientClient{cc}
}

func (c *serverToClientClient) FillSquares(ctx context.Context, in *FillSquaresRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerToClient_FillSquares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverToClientClient) EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerToClient_EndGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverToClientClient) SendGamesInfo(ctx context.Context, in *SendGamesInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerToClient_SendGamesInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverToClientClient) SendGameInfoFull(ctx context.Context, in *SendGameInfoFullRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerToClient_SendGameInfoFull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerToClientServer is the server API for ServerToClient service.
// All implementations must embed UnimplementedServerToClientServer
// for forward compatibility.
type ServerToClientServer interface {
	FillSquares(context.Context, *FillSquaresRequest) (*emptypb.Empty, error)
	EndGame(context.Context, *EndGameRequest) (*emptypb.Empty, error)
	SendGamesInfo(context.Context, *SendGamesInfoRequest) (*emptypb.Empty, error)
	SendGameInfoFull(context.Context, *SendGameInfoFullRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServerToClientServer()
}

// UnimplementedServerToClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerToClientServer struct{}

func (UnimplementedServerToClientServer) FillSquares(context.Context, *FillSquaresRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillSquares not implemented")
}
func (UnimplementedServerToClientServer) EndGame(context.Context, *EndGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGame not implemented")
}
func (UnimplementedServerToClientServer) SendGamesInfo(context.Context, *SendGamesInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGamesInfo not implemented")
}
func (UnimplementedServerToClientServer) SendGameInfoFull(context.Context, *SendGameInfoFullRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGameInfoFull not implemented")
}
func (UnimplementedServerToClientServer) mustEmbedUnimplementedServerToClientServer() {}
func (UnimplementedServerToClientServer) testEmbeddedByValue()                        {}

// UnsafeServerToClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerToClientServer will
// result in compilation errors.
type UnsafeServerToClientServer interface {
	mustEmbedUnimplementedServerToClientServer()
}

func RegisterServerToClientServer(s grpc.ServiceRegistrar, srv ServerToClientServer) {
	// If the following call pancis, it indicates UnimplementedServerToClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerToClient_ServiceDesc, srv)
}

func _ServerToClient_FillSquares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FillSquaresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerToClientServer).FillSquares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerToClient_FillSquares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerToClientServer).FillSquares(ctx, req.(*FillSquaresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerToClient_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerToClientServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerToClient_EndGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerToClientServer).EndGame(ctx, req.(*EndGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerToClient_SendGamesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGamesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerToClientServer).SendGamesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerToClient_SendGamesInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerToClientServer).SendGamesInfo(ctx, req.(*SendGamesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerToClient_SendGameInfoFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameInfoFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerToClientServer).SendGameInfoFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerToClient_SendGameInfoFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerToClientServer).SendGameInfoFull(ctx, req.(*SendGameInfoFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerToClient_ServiceDesc is the grpc.ServiceDesc for ServerToClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerToClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.ServerToClient",
	HandlerType: (*ServerToClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FillSquares",
			Handler:    _ServerToClient_FillSquares_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _ServerToClient_EndGame_Handler,
		},
		{
			MethodName: "SendGamesInfo",
			Handler:    _ServerToClient_SendGamesInfo_Handler,
		},
		{
			MethodName: "SendGameInfoFull",
			Handler:    _ServerToClient_SendGameInfoFull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/internal_api.proto",
}

const (
	ClientToServer_CreateGame_FullMethodName    = "/game.ClientToServer/CreateGame"
	ClientToServer_JoinGame_FullMethodName      = "/game.ClientToServer/JoinGame"
	ClientToServer_LeaveGame_FullMethodName     = "/game.ClientToServer/LeaveGame"
	ClientToServer_SendDirection_FullMethodName = "/game.ClientToServer/SendDirection"
)

// ClientToServerClient is the client API for ClientToServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientToServerClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	LeaveGame(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendDirection(ctx context.Context, in *SendDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clientToServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClientToServerClient(cc grpc.ClientConnInterface) ClientToServerClient {
	return &clientToServerClient{cc}
}

func (c *clientToServerClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, ClientToServer_CreateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToServerClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, ClientToServer_JoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToServerClient) LeaveGame(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientToServer_LeaveGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToServerClient) SendDirection(ctx context.Context, in *SendDirectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientToServer_SendDirection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientToServerServer is the server API for ClientToServer service.
// All implementations must embed UnimplementedClientToServerServer
// for forward compatibility.
type ClientToServerServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	LeaveGame(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SendDirection(context.Context, *SendDirectionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedClientToServerServer()
}

// UnimplementedClientToServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientToServerServer struct{}

func (UnimplementedClientToServerServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedClientToServerServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedClientToServerServer) LeaveGame(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGame not implemented")
}
func (UnimplementedClientToServerServer) SendDirection(context.Context, *SendDirectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDirection not implemented")
}
func (UnimplementedClientToServerServer) mustEmbedUnimplementedClientToServerServer() {}
func (UnimplementedClientToServerServer) testEmbeddedByValue()                        {}

// UnsafeClientToServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientToServerServer will
// result in compilation errors.
type UnsafeClientToServerServer interface {
	mustEmbedUnimplementedClientToServerServer()
}

func RegisterClientToServerServer(s grpc.ServiceRegistrar, srv ClientToServerServer) {
	// If the following call pancis, it indicates UnimplementedClientToServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientToServer_ServiceDesc, srv)
}

func _ClientToServer_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToServer_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToServer_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToServer_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToServer_LeaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServer).LeaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToServer_LeaveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServer).LeaveGame(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToServer_SendDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServer).SendDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToServer_SendDirection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServer).SendDirection(ctx, req.(*SendDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientToServer_ServiceDesc is the grpc.ServiceDesc for ClientToServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientToServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.ClientToServer",
	HandlerType: (*ClientToServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _ClientToServer_CreateGame_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _ClientToServer_JoinGame_Handler,
		},
		{
			MethodName: "LeaveGame",
			Handler:    _ClientToServer_LeaveGame_Handler,
		},
		{
			MethodName: "SendDirection",
			Handler:    _ClientToServer_SendDirection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/internal_api.proto",
}
